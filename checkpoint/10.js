const { BinarySearchTree } = require('../DS');
/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

üîü ***** EJERCICIO 10 - BINARYSEARCHTREE ***** - ingresar() üîü

¬°Atenci√≥n! Est√° llegando nuestro primer cliente. Debemos venderle la entrada a la pel√≠cula que quiere ver. Para esto
tendr√°s que agregar al prototipo de "BinarySearchTree" un m√©todo llamado "ingresar". Este recibir√° por par√°metro un
arreglo de objetos en los que se encuentran los horarios y nombres de las pel√≠culas.

Tendr√°s que recorre el √°rbol y agregar la propiedad "ticket" con el valor true en cada uno de los nodos que coincida 
con los elementos del arreglo que recibes por par√°emtro. De esta forma podremos identificar qu√© tickets tienen due√±o y 
cu√°ntos quedan disponibles.


‚õîÔ∏è IMPORTANTE ‚õîÔ∏è
1) Tanto los nodos del √°rbol como los elementos del array de objetos ser√°n valores √∫nicos.
2) Si el arreglo est√° vac√≠o retornar false.


üìù EJEMPLO üìù
√ÅRBOL
                           { nombre: "Chaplin", horario: 10 }
                             /                             \
       {nombre: "El Hobbit", horario: 7}     {nombre: "Masacre en Texas", horario: 22}
                         /                                       \
{nombre: "300", horario: 6}            {nombre: "Harry potter", horario: 23}


INPUT ---> [{ nombre: "Harry potter", horario: 23 }, { nombre: "300", horario: 6 }, { nombre: "El Hobbit", horario: 7 }];
OUTPUT -->
                           { nombre: "Chaplin", horario: 10 }
                             /                             \
       {nombre: "El Hobbit", horario: 7, ticket: true}     {nombre: "Masacre en Texas", horario: 22}
                         /                                       \
{nombre: "300", horario: 6, ticket: true}            {nombre: "Harry potter", horario: 23, ticket: true}
*/

// 1.- Qu√© nos llega? Un arreglo con elementos √∫nicos
// 2.- Qu√© se debe hacer? Agregar al prototype BinarySearchTree el m√©todo "ingresar" que recibir√° por par√°metro un
//     arreglo de objetos en los que se encuentran los horarios y nombres de las pel√≠culas. Recorrer el arbol y agregar la
//     propiedad "ticket" con el valor true en cada uno de los nodos que coincida con los elementos del arreglo que 
//     recibes por par√°metro para identificar qu√© tickets tienen due√±o y cu√°ntos quedan disponibles. Si el arreglo recibido
//     est√° vac√≠o devolver false.
// 3.- C√≥mo proceder?

BinarySearchTree.prototype.ingresar = function (arregloDePeliculas) {
   // Tu c√≥digo aqu√≠:
   if (arregloDePeliculas.length === 0) return false;
   let resultado = [];
   while (this.left !== null && this.right !== null){
    for (let i=0; i < arregloDePeliculas.length; i++){
      if (arregloDePeliculas[i].nombre === this.left.value || arregloDePeliculas[i].nombre === this.right.value){
        resultado.push(arregloDePeliculas[i]);
      }
    }
    this.right=this.right.right;
    this.left = this.left.left;    

    }
    for (let i=0;i<resultado.length;i++){
      resultado[i].ticket = true;
    }
    return resultado;   
   

};

/*‚ö†Ô∏è NO MODIFICAR NADA DEBAJO DE ESTA LINEA ‚ö†Ô∏è*/
module.exports = BinarySearchTree;
